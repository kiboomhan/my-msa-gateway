# Use root/example as user/password credentials
version: '3.8'

services:

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.9-management
    ports:
      - "5672:5672"
      - "15672:15672"

  zookeeper-1:
    image: confluentinc/cp-zookeeper:6.2.0
#    hostname: zookeeper
    container_name: zookeeper-1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  zookeeper-2:
    image: confluentinc/cp-zookeeper:6.2.0
#    hostname: zookeeper
    container_name: zookeeper-2
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker-1:
    image: confluentinc/cp-kafka:6.2.0
#    hostname: broker-1
    container_name: broker-1
    ports:
      - "9091:9091"
      - "29091:29091"
      - "9101:9101"
    depends_on:
      - zookeeper-1
      - zookeeper-2
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "host.docker.internal:2181,host.docker.internal:2182"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9091,PLAINTEXT_HOST://host.docker.internal:29091
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
#      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_JMX_OPTS: -Dlog4j.logger.org.apache.kafka.common.network.Selector=ERROR
        -Dcom.sun.management.jmxremote=true
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Djava.rmi.server.hostname=kafka.myserver.com
        -Dcom.sun.management.jmxremote.rmi.port=9101
        -Djava.net.preferIPv4Stack=true

  broker-2:
    image: confluentinc/cp-kafka:6.2.0
#    hostname: broker-2
    container_name: broker-2
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9102:9102"
    depends_on:
      - zookeeper-1
      - zookeeper-2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "host.docker.internal:2181,host.docker.internal:2182"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9092,PLAINTEXT_HOST://host.docker.internal:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9102
      #      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_JMX_OPTS: -Dlog4j.logger.org.apache.kafka.common.network.Selector=ERROR
        -Dcom.sun.management.jmxremote=true
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Djava.rmi.server.hostname=kafka.myserver.com
        -Dcom.sun.management.jmxremote.rmi.port=9101
        -Djava.net.preferIPv4Stack=true

  broker-3:
    image: confluentinc/cp-kafka:6.2.0
#    hostname: broker-3
    container_name: broker-3
    ports:
      - "9093:9093"
      - "29093:29093"
      - "9103:9103"
    depends_on:
      - zookeeper-1
      - zookeeper-2
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "host.docker.internal:2181,host.docker.internal:2182"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9093,PLAINTEXT_HOST://host.docker.internal:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9103
      #      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_JMX_OPTS: -Dlog4j.logger.org.apache.kafka.common.network.Selector=ERROR
        -Dcom.sun.management.jmxremote=true
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Djava.rmi.server.hostname=kafka.myserver.com
        -Dcom.sun.management.jmxremote.rmi.port=9101
        -Djava.net.preferIPv4Stack=true

  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:latest
    container_name: kafka-connect
    ports:
      - "8083:8083"
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - broker-1
      - broker-2
      - broker-3
    environment:
      CONNECT_BOOTSTRAP_SERVERS: host.docker.internal:9091,host.docker.internal:9092,host.docker.internal:9093
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "my-msa-connect"
      CONNECT_CONFIG_STORAGE_TOPIC: "my-msa-connect-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "my-msa-connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "my-msa-connect-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://localhost:8081"
#      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://localhost:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "host.docker.internal"
      CONNECT_ZOOKEEPER_CONNECT: "host.docker.internal:2181,host.docker.internal:2182"
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
#      CONNECT_PLUGIN_PATH: /usr/share/java,/etc/kafka-connect/jars
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
    volumes:
      - ./kafka-connect/etckafka-connectjars:/etc/kafka-connect/jars
      - ./kafka-connect/usrshareconfluent-hub-components:/usr/share/confluent-hub-components
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.2.2
        /etc/confluent/docker/run

  kafka-manager:
#    image:   deltaprojects/kafka-manager:latest
#    container_name: kafka-manager
#    ports:
#      - "9000:9000"
#    environment:
#      KAFKA_MANAGER_AUTH_ENABLED: true # default value
#      KAFKA_MANAGER_USERNAME: admin # default value
#      KAFKA_MANAGER_PASSWORD: test1234 # default value
#      KAFKA_MANAGER_LDAP_ENABLED: false
#      KAFKA_MANAGER_EXTRA_PLAY_OPTS: ""
    image: hlebalbau/kafka-manager:stable
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: "host.docker.internal:2181,host.docker.internal:2182"
      APPLICATION_SECRET: "random-secret"
      KAFKA_MANAGER_AUTH_ENABLED: "true"
      KAFKA_MANAGER_USERNAME: admin
      KAFKA_MANAGER_PASSWORD: test1234

  # The zipkin process services the UI, and also exposes a POST endpoint that
  # instrumentation can send trace data to. Scribe is disabled by default.
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
#    environment:
#      - STORAGE_TYPE=mysql
      # Point the zipkin at the storage backend
#      - MYSQL_HOST=mysql
      # Uncomment to enable scribe
      # - SCRIBE_ENABLED=true
      # Uncomment to enable self-tracing
      # - SELF_TRACING_ENABLED=true
      # Uncomment to enable debug logging
      # - JAVA_OPTS=-Dlogging.level.zipkin2=DEBUG
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - "9411:9411"
      # Uncomment if you set SCRIBE_ENABLED=true
      # - 9410:9410
#    depends_on:
#      - storage

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin